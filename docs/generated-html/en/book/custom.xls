<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xslthl="http://xslthl.sf.net" xmlns:d="http://docbook.org/ns/docbook"
    xmlns:fo="http://www.w3.org/1999/XSL/Format"
    exclude-result-prefixes="xslthl" version="1.0">

    <xsl:import href="urn:docbkx:stylesheet" />

<xsl:param name="generate.toc">
    appendix  toc,title
    article/appendix  nop
    article   toc,title
    book      toc,title
    chapter   toc,title
    part      toc,title
    preface   toc,title
    qandadiv  toc
    qandaset  toc
    reference toc,title
    sect1     toc
    sect2     toc
    sect3     toc
    sect4     toc
    sect5     toc
    section   toc
    set       toc,title
</xsl:param>	
	
<!--
    Graphics
  -->
<!-- graphicsize.extension only relevant for html output -->
<!--
  <xsl:param name="graphicsize.extension">1</xsl:param>
  -->
<xsl:param name="default.image.width">6.3in</xsl:param>
<xsl:param name="default.inline.image.height">...</xsl:param>
<xsl:template name="process.image">
<!-- if image is wider than the page, shrink it down to default.image.width -->
<xsl:variable name="scalefit">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">0</xsl:when>
<xsl:when test="@contentwidth">0</xsl:when>
<xsl:when test="@contentdepth and @contentdepth != '100%'">0</xsl:when>
<xsl:when test="@scale">0</xsl:when>
<xsl:when test="@scalefit">
<xsl:value-of select="@scalefit"/>
</xsl:when>
<xsl:when test="@width or @depth">1</xsl:when>
<xsl:otherwise>0</xsl:otherwise>
</xsl:choose>
</xsl:variable>
<xsl:variable name="scale">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">0</xsl:when>
<xsl:when test="@contentwidth or @contentdepth">1.0</xsl:when>
<xsl:when test="@scale">
<xsl:value-of select="@scale div 100.0"/>
</xsl:when>
<xsl:otherwise>1.0</xsl:otherwise>
</xsl:choose>
</xsl:variable>
<xsl:variable name="filename">
<xsl:choose>
<xsl:when test="local-name(.) = 'graphic' or local-name(.) = 'inlinegraphic'">
<xsl:call-template name="mediaobject.filename">
<xsl:with-param name="object" select="."/>
</xsl:call-template>
</xsl:when>
<xsl:otherwise>
<xsl:call-template name="mediaobject.filename">
<xsl:with-param name="object" select=".."/>
</xsl:call-template>
</xsl:otherwise>
</xsl:choose>
</xsl:variable>
<xsl:variable name="content-type">
<xsl:if test="@format">
<xsl:call-template name="graphic.format.content-type">
<xsl:with-param name="format" select="@format"/>
</xsl:call-template>
</xsl:if>
</xsl:variable>
<xsl:variable name="bgcolor">
<xsl:call-template name="pi.dbfo_background-color">
<xsl:with-param name="node" select=".."/>
</xsl:call-template>
</xsl:variable>
<fo:external-graphic>
<xsl:attribute name="src">
<xsl:call-template name="fo-external-image">
<xsl:with-param name="filename">
<xsl:if test="$img.src.path != '' and not(starts-with($filename, '/')) and not(contains($filename, '://'))">
<xsl:value-of select="$img.src.path"/>
</xsl:if>
<xsl:value-of select="$filename"/>
</xsl:with-param>
</xsl:call-template>
</xsl:attribute>
<xsl:attribute name="width">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">auto</xsl:when>
<xsl:when test="contains(@width,'%')">
<xsl:value-of select="@width"/>
</xsl:when>
<xsl:when test="@width and not(@width = '')">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="@width"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:when test="not(@depth) and name(../..) != 'inlinemediaobject' and $default.image.width != ''">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="$default.image.width"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:otherwise>auto</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<xsl:attribute name="height">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">auto</xsl:when>
<xsl:when test="contains(@depth,'%')">
<xsl:value-of select="@depth"/>
</xsl:when>
<xsl:when test="@depth">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="@depth"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:when test="name(../..) = 'inlinemediaobject' and $default.inline.image.height != ''">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="$default.inline.image.height"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:otherwise>auto</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<xsl:attribute name="content-width">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">auto</xsl:when>
<xsl:when test="contains(@contentwidth,'%')">
<xsl:value-of select="@contentwidth"/>
</xsl:when>
<xsl:when test="@contentwidth">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="@contentwidth"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:when test="number($scale) != 1.0">
<xsl:value-of select="$scale * 100"/>
<xsl:text>%</xsl:text>
</xsl:when>
<xsl:when test="$scalefit = 1">scale-to-fit</xsl:when>
<xsl:otherwise>scale-down-to-fit</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<xsl:attribute name="content-height">
<xsl:choose>
<xsl:when test="$ignore.image.scaling != 0">auto</xsl:when>
<xsl:when test="contains(@contentdepth,'%')">
<xsl:value-of select="@contentdepth"/>
</xsl:when>
<xsl:when test="@contentdepth">
<xsl:call-template name="length-spec">
<xsl:with-param name="length" select="@contentdepth"/>
<xsl:with-param name="default.units" select="'px'"/>
</xsl:call-template>
</xsl:when>
<xsl:when test="number($scale) != 1.0">
<xsl:value-of select="$scale * 100"/>
<xsl:text>%</xsl:text>
</xsl:when>
<xsl:when test="$scalefit = 1">scale-to-fit</xsl:when>
<xsl:otherwise>scale-down-to-fit</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<xsl:if test="$content-type != ''">
<xsl:attribute name="content-type">
<xsl:value-of select="concat('content-type:',$content-type)"/>
</xsl:attribute>
</xsl:if>
<xsl:if test="$bgcolor != ''">
<xsl:attribute name="background-color">
<xsl:value-of select="$bgcolor"/>
</xsl:attribute>
</xsl:if>
<xsl:if test="@align">
<xsl:attribute name="text-align">
<xsl:value-of select="@align"/>
</xsl:attribute>
</xsl:if>
<xsl:if test="@valign">
<xsl:attribute name="display-align">
<xsl:choose>
<xsl:when test="@valign = 'top'">before</xsl:when>
<xsl:when test="@valign = 'middle'">center</xsl:when>
<xsl:when test="@valign = 'bottom'">after</xsl:when>
<xsl:otherwise>auto</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
</xsl:if>
</fo:external-graphic>
<!-- </xsl:template> -->

    <!-- Add any other template overrides here -->

</xsl:stylesheet>